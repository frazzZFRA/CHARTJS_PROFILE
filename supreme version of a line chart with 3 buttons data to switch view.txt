import { Line } from 'react-chartjs-2';
import Chart, { LineController, TimeScale, Tick, PointElement, LineElement, Tooltip, CartesianTickOptions, CoreChartOptions, CoreScaleOptions, DatasetChartOptions, ElementChartOptions, LineControllerChartOptions, PluginChartOptions, Scale, ScaleChartOptions, TickOptions } from 'chart.js/auto';

import 'chartjs-adapter-date-fns';
import { useState, useEffect } from 'react';

type Align = 'start' | 'center' | 'end';

interface MyTickOptions extends TickOptions {
  sampleSize: number;
  align: Align | "inner";
  autoSkip: boolean;
  autoSkipPadding: number;
  crossAlign: "center" | "near" | "far";
  includeBounds: boolean;
  maxRotation: number;
  maxTicksLimit: number;
}
const tickOptions: MyTickOptions & { sampleSize: number } = {
  sampleSize: 10,
  source: undefined,
  stepSize: undefined,
  align: 'center',
  autoSkip: true,
  autoSkipPadding: 0,
  crossAlign: 'center',
  includeBounds: false,
  maxRotation: 0,
  maxTicksLimit: 10,
  backdropColor: '',
  backdropPadding: 0,
  callback: function (this: Scale<CoreScaleOptions>, tickValue: string | number, index: number, ticks: Tick[]): string | number | string[] | number[] {
    throw new Error('Function not implemented.');
  },
  display: false,
  color: '',
  font: undefined,
  padding: 0,
  showLabelBackdrop: false,
  textStrokeColor: '',
  textStrokeWidth: 0,
  z: 0,
  major: {
    enabled: false
  }
};

const initialData = {
  labels: [],
  datasets: [
    {
      label: 'My Dataset',
      data: [],
      borderColor: 'rgba(75,192,192,1)',
      tension: 0.1
    }
  ]
};


type MyChartOptions = CoreChartOptions<"line"> & ElementChartOptions<"line"> & PluginChartOptions<"line"> & DatasetChartOptions<"line"> & ScaleChartOptions<"line"> & LineControllerChartOptions;

const myOptions: MyChartOptions = {
  scales: {
    x: {
      type: 'time',
      time: {
        unit: 'day',
        parser: 'YYYY-MM-DD',
        round: 'minute',
        isoWeekday: false,
        displayFormats: {
          day: 'YYYY-MM-DD'
        },
        tooltipFormat: 'll HH:mm',
        minUnit: 'day'
      },
      ticks: tickOptions,
      bounds: 'data',
      position: 'bottom',
      axis: 'x',
      offset: false
    }
  }
};


Chart.register(LineController, LineElement, PointElement, TimeScale, Tooltip);

const fetchData = async (interval) => {
  const response = await fetch(`https://www.alphavantage.co/query?function=TIME_SERIES_INTRADAY&symbol=IBM&interval=${interval}&apikey=BJY43RP8KJ495LS1&outputsize=compact`);
  const json = await response.json();
  const data = Object.entries(json['Time Series (5min)']).map(([key, value]) => ({ t: new Date(key), y: parseFloat(value['4. close']) }));
  const labels = data.map((item) => item.t);
  const values = data.map((item
) => item.y);
  return { labels, datasets: [{ ...initialData.datasets[0], data: values }] };
};



export default function ChartComponent() {
  const [interval, setInterval] = useState('5min');
  const [chartData, setChartData] = useState(initialData);

  useEffect(() => {
    fetchData(interval).then(data => {
      setChartData(data);
    });
  }, [interval]);

  return (
    <div>
      <div>
        <button onClick={() => setInterval('day')}>day</button>
        <button onClick={() => setInterval('week')}>week</button>
        <button onClick={() => setInterval('month')}>month</button>
      </div>
      <Line data={chartData} options={myOptions} />
    </div>
  );
}
